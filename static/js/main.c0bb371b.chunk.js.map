{"version":3,"sources":["components/Header/header.component.jsx","components/Node/Node.component.jsx","components/GridN/gridn.components.jsx","Algortithms/astar.js","Algortithms/bfs.js","Algortithms/dfs.js","components/Pathfind/Pathfind.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["reset","window","location","reload","Header","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","to","Toggle","Collapse","id","Nav","className","NavDropdown","title","Item","Link","onClick","Node","Change","isStart","isEnd","row","col","isWall","start","end","classes","startEnd","Grids","Grid","map","rowIndex","colIndex","heuristic","a","b","Math","abs","x","y","Astar","startNode","endNode","openSet","closedSet","path","visitedNodes","push","leastIndex","i","length","f","current","temp","previous","filter","el","neighbours","neighbour","includes","tempG","g","newPath","h","error","bfs","nodes","u","d","alt","dfs","s","pop","n","rows","PathFind","algo","useState","setGrid","setPath","setVisitedNotes","setStart","setEnd","startRow","setStartRow","startCol","setStartCol","EndRow","setEndRow","cols","EndCol","setEndCol","useEffect","initializeGrid","console","log","grid","Array","createSpot","addNeighbour","show","j","Spot","addneighbours","this","random","Infinity","undefined","Button","setTimeout","shortestPathNodes","node","document","getElementById","visualizeShortestPath","e","target","substr","split","parseInt","App","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"qUAIMA,EAAQ,WACVC,OAAOC,SAASC,UA6BLC,EA3BA,WACX,OACI,cAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAvD,SACI,eAACC,EAAA,EAAD,WACA,cAACL,EAAA,EAAOM,MAAR,UAAc,cAAC,OAAD,CAAMC,GAAG,IAAT,sCACd,cAACP,EAAA,EAAOQ,OAAR,CAAe,gBAAc,0BAC7B,eAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,wBAApB,UACI,cAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,SACA,eAACC,EAAA,EAAD,CAAaC,MAAM,aAAaJ,GAAG,0BAAnC,UACI,cAAC,gBAAD,CAAeH,GAAG,UAAlB,SAA4B,cAACM,EAAA,EAAYE,KAAb,mBAC5B,cAAC,gBAAD,CAAeR,GAAG,OAAlB,SAAyB,cAACM,EAAA,EAAYE,KAAb,oBACzB,cAAC,gBAAD,CAAeR,GAAG,OAAlB,SAAyB,cAACM,EAAA,EAAYE,KAAb,yBAO7B,cAACJ,EAAA,EAAD,UACA,cAACA,EAAA,EAAIK,KAAL,CAAUC,QAAStB,EAAnB,8B,QChBDuB,G,MATF,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,OAAOC,EAA4C,EAA5CA,QAAQC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,IAAIC,EAA0B,EAA1BA,IAAIC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAC/CC,EAAUP,EAAS,aAAcI,EAAO,SAAUH,EAAM,WAAW,GACnEO,EAAYH,GAASC,EAAK,MAAM,GAEtC,OACI,qBAAKT,QAASE,EAAQP,UAAS,eAAUe,EAAV,YAAqBC,GAAalB,GAAE,eAAUY,EAAV,YAAiBC,OCc7EM,G,MAlBD,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAKX,EAAsB,EAAtBA,OAAOM,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE9B,OACA,qBAAKd,UAAU,OAAf,SACKkB,EAAKC,KAAI,SAACT,EAAIU,GACX,OACI,qBAAoBpB,UAAU,aAA9B,SACKU,EAAIS,KAAI,SAACR,EAAIU,GACV,IAAMb,EAAwBG,EAAxBH,QAAQC,EAAgBE,EAAhBF,MAAMG,EAAUD,EAAVC,OACpB,OAAO,cAAC,EAAD,CAAML,OAAQA,EAAuBM,MAAOA,EAAOC,IAAKA,EAAKN,QAASA,EAASC,MAAOA,EAAOC,IAAKU,EAAUT,IAAKU,EAAUT,OAAQA,GAAxGS,OAHhCD,UCoE1B,SAASE,EAAUC,EAAEC,GAEjB,OADQC,KAAKC,IAAIF,EAAEG,EAAIJ,EAAEI,GAAKF,KAAKC,IAAIF,EAAEI,EAAIL,EAAEK,GAIpCC,MAjFf,SAAeC,EAAUC,GACrB,IAAIC,EAAU,GACVC,EAAY,GACZC,EAAO,GACPC,EAAe,GAEnBH,EAAQI,KAAKN,GACb,IAP6B,iBASzB,IADA,IAAIO,EAAa,EACTC,EAAE,EAAEA,EAAEN,EAAQO,OAAOD,IAEtBN,EAAQM,GAAGE,EAAER,EAAQK,GAAYG,IAEhCH,EAAaC,GAGrB,IAAIG,EAAUT,EAAQK,GAKtB,GAJAF,EAAaC,KAAKK,GAIfA,IAAYV,EACf,CACI,IAAIW,EAAOD,EAEX,IADAP,EAAKE,KAAKM,GACJA,EAAKC,UACPT,EAAKE,KAAKM,EAAKC,UACfD,EAAOA,EAAKC,SAEhB,MAAM,CAAN,EAAO,CAACT,OAAKC,iBAIjBH,EAAUA,EAAQY,QAAO,SAACC,GAAD,OAAOA,IAAOJ,KACvCR,EAAUG,KAAKK,GAGf,IADA,IAAIK,EAAaL,EAAQK,WACjBR,EAAE,EAAEA,EAAGQ,EAAWP,OAAOD,IACjC,CAEI,IAAIS,EAAYD,EAAWR,GAC3B,IAAIL,EAAUe,SAASD,KAAeA,EAAUnC,OAChD,CACI,IAAIqC,EAAQR,EAAQS,EAAE,EAClBC,GAAS,EAEVnB,EAAQgB,SAASD,GAEbE,EAAMF,EAAUG,IAIfC,GAAU,IAKdA,GAAU,EACVnB,EAAQI,KAAKW,IAGdI,IAECJ,EAAUG,EAAID,EACdF,EAAUK,EAAI9B,EAAUyB,EAAUhB,GAClCgB,EAAUP,EAAIO,EAAUG,EAAIH,EAAUK,EACtCL,EAAUJ,SAAWF,MA3D/BT,EAAQO,OAAS,GAAE,CAAC,IAAD,wCAkEzB,MAAO,CAAEL,OAAKC,eAAckB,MAAM,kB,gBCdvBC,MA3Df,SAAaxB,EAAUC,GACnB,IAAIG,EAAO,GACPD,EAAY,GACZE,EAAe,GACfoB,EAAM,GACVA,EAAMnB,KAAKN,GACX,IAN2B,iBASvB,IADA,IAAI0B,EAAGD,EAAM,GACLjB,EAAE,EAAEA,EAAEiB,EAAMhB,OAAOD,IAEpBiB,EAAMjB,GAAGmB,EAAED,EAAEC,IAEZD,EAAID,EAAMjB,IAGlBH,EAAaC,KAAKoB,GAClBvB,EAAUG,KAAKoB,GACfD,EAAQA,EAAMX,QAAO,SAACC,GAAD,OAAOA,IAAMW,KAGlC,IADA,IAAIV,EAAaU,EAAEV,WACXR,EAAE,EAAEA,EAAGQ,EAAWP,OAAOD,IACjC,CAEI,IAAIS,EAAYD,EAAWR,GAC3B,IAAIL,EAAUe,SAASD,KAAeA,EAAUnC,OAChD,CAEI,IAAI8C,EAAMF,EAAEC,EAAI,EACbC,EAAIX,EAAUU,IAEbV,EAAUU,EAAIC,EACdX,EAAUJ,SAAWa,EACrBD,EAAMnB,KAAKW,KAIvB,GAAGS,IAAMzB,EACT,CACI,IAAIW,EAAOc,EAEX,IADAtB,EAAKE,KAAKM,GACJA,EAAKC,UACPT,EAAKE,KAAKM,EAAKC,UACfD,EAAOA,EAAKC,SAGhB,MAAM,CAAN,EAAO,CAACT,OAAKC,mBAxCE,IAAjBoB,EAAMhB,QACZ,CAAC,IAAD,wCA8CJ,MAAO,CAAEL,OAAKC,eAAckB,MAAM,kBCdnBM,MAvCf,SAAa7B,EAAUC,GACnB,IAAI6B,EAAI,GACJzB,EAAe,GACfD,EAAO,GAKX,IAJA0B,EAAExB,KAAKN,GAEPK,EAAaC,KAAKN,GAEC,IAAb8B,EAAErB,QACR,CACI,IAAIiB,EAAII,EAAEC,MACNC,EAAIN,EAAEV,WACV,GAAGU,IAAMzB,EACT,CACI,IAAIW,EAAOc,EAEX,IADAtB,EAAKE,KAAKM,GACJA,EAAKC,UACPT,EAAKE,KAAKM,EAAKC,UACfD,EAAOA,EAAKC,SAEhB,MAAO,CAACT,OAAKC,gBAGjB,IAAI,IAAIG,EAAE,EAAEA,EAAEwB,EAAEvB,OAAOD,IAEfH,EAAaa,SAASc,EAAExB,KAAQwB,EAAExB,GAAG1B,SAErCkD,EAAExB,GAAGK,SAAWa,EAChBrB,EAAaC,KAAK0B,EAAExB,IACpBsB,EAAExB,KAAK0B,EAAExB,OCrBnByB,EAAO,GA2LEC,EAxLE,SAAC,GAAW,IAAVC,EAAS,EAATA,KACf,EAAuBC,mBAAS,IAAhC,mBAAOhD,EAAP,KAAYiD,EAAZ,KACA,EAAuBD,mBAAS,IAAhC,mBAAOhC,EAAP,KAAYkC,EAAZ,KACA,EAAuCF,mBAAS,IAAhD,mBAAO/B,EAAP,KAAoBkC,EAApB,KAEA,EAAyBH,oBAAS,GAAlC,mBAAOrD,EAAP,KAAayD,EAAb,KACA,EAAqBJ,oBAAS,GAA9B,mBAAOpD,EAAP,KAAWyD,EAAX,KACA,EAA+BL,mBAAS,GAAxC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA+BP,mBAAS,GAAxC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAA2BT,mBAASH,IAApC,mBAAOa,EAAP,KAAcC,EAAd,KACA,EAA2BX,mBAASY,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACNC,IACAC,QAAQC,IAAInB,KACb,CAACO,EAASE,EAASK,EAAOH,EAAOX,IAEpC,IAAMiB,EAAiB,WAGnB,IAFA,IAAMG,EAAO,IAAIC,MAAMvB,GAEfzB,EAAE,EAAEA,EAAEyB,EAAKzB,IAEf+C,EAAK/C,GAAK,IAAIgD,MAxBb,IA0BLC,EAAWF,EAAK,GAEhBlB,EAAQkB,GACRG,EAAaH,GAEb,IAAMvD,EAAYuD,EAAKb,GAAUE,GAC3B3C,EAAUsD,EAAKT,GAAQG,GAC7BjD,EAAUlB,QAAS,EACnBmB,EAAQnB,QAAS,EACjBuD,EAAQkB,GACR,IAAInD,EAAOL,EAAMC,EAAUC,GACf,QAATkC,EAGC/B,EAAOoB,EAAIxB,EAAUC,GAER,QAATkC,IAGJ/B,EAAOyB,EAAI7B,EAAUC,IAEzBqC,EAAQlC,EAAKA,MACbmC,EAAgBnC,EAAKC,eAGnBoD,EAAY,SAACF,EAAKI,GACpB,IAAI,IAAInD,EAAE,EAAEA,EAAEyB,EAAKzB,IAEf,IAAI,IAAIoD,EAAE,EAAEA,EAtDX,GAsDkBA,IAEfL,EAAK/C,GAAGoD,GAAK,IAAIC,EAAKrD,EAAEoD,EAAED,IAMhCD,EAAc,SAACH,GACjB,IAAI,IAAI/C,EAAG,EAAEA,EAAEyB,EAAKzB,IAEhB,IAAI,IAAIoD,EAAE,EAAEA,EAjEX,GAiEkBA,IAEfL,EAAK/C,GAAGoD,GAAGE,cAAcP,IAKrC,SAASM,EAAKrD,EAAEoD,EAAED,GAEdI,KAAKlE,EAAIW,EACTuD,KAAKjE,EAAI8D,EACTG,KAAKrF,QAAUqF,KAAKlE,IAAM6C,GAAYqB,KAAKjE,IAAM8C,EACjDmB,KAAKpF,MAAQoF,KAAKlE,IAAMiD,GAAUiB,KAAKjE,IAAMmD,EAC7Cc,KAAK3C,EAAI,EACT2C,KAAKrD,EAAI,EACTqD,KAAKjF,QAAS,EACXa,KAAKqE,OAAO,GAAG,IAAOL,IACrBI,KAAKjF,QAAS,GAElBiF,KAAKzC,EAAI,EACTyC,KAAKpC,EAAIsC,IACNF,KAAKlE,IAAM6C,GAAYqB,KAAKjE,IAAM8C,IACjCmB,KAAKpC,EAAI,GAEboC,KAAK/C,WAAW,GAChB+C,KAAKlD,cAAWqD,EAChBH,KAAKD,cAAgB,SAASP,GAE1B,IAAI/C,EAAIuD,KAAKlE,EACT+D,EAAIG,KAAKjE,EACVU,EAAE,GAAEuD,KAAK/C,WAAWV,KAAKiD,EAAK/C,EAAE,GAAGoD,IACnCpD,EAAEyB,IAAQ8B,KAAK/C,WAAWV,KAAKiD,EAAK/C,EAAE,GAAGoD,IACzCA,EAAE,GAAGG,KAAK/C,WAAWV,KAAKiD,EAAK/C,GAAGoD,EAAE,IACpCA,EAAEZ,IAAQe,KAAK/C,WAAWV,KAAKiD,EAAK/C,GAAGoD,EAAE,KAwEpD,OACI,sBAAK1F,UAAU,UAAf,UACA,+BAAKiE,EAAL,gBACA,sBAAKjE,UAAU,UAAf,UACI,cAACiG,EAAA,EAAD,CAAQzG,QAAQ,OAAOa,QArCT,WAClB,IADuB,IAAD,WACdiC,GAEDA,IAAMH,EAAaI,OAElB2D,YAAW,YAhBO,SAACC,GAE3B,IAFiD,IAAD,WAExC7D,GAEJ4D,YAAW,WACP,IAAME,EAAOD,EAAkB7D,GAC/B+D,SAASC,eAAT,eAAgCF,EAAKzE,EAArC,YAA0CyE,EAAKxE,IAAK5B,UAAU,4BAC/D,GAAGsC,IALFA,EAAG,EAAEA,EAAE6D,EAAkB5D,OAAOD,IACvC,EADOA,GAeIiE,CAAsBrE,KACvB,GAAGI,GAGN4D,YAAW,WACP,IAAME,EAAOjE,EAAaG,GAC1B+D,SAASC,eAAT,eAAgCF,EAAKzE,EAArC,YAA0CyE,EAAKxE,IAAK5B,UAAU,sBAE/D,GAAGsC,IAbNA,EAAG,EAAEA,GAAGH,EAAaI,OAAOD,IACnC,EADOA,IAoCJ,4BACA,cAAC2D,EAAA,EAAD,CAAQ5F,QAlBA,WACZiE,GAAUzD,GACPA,GACC0D,GAAO,IAeoB/E,QAAQ,OAAnC,uBACA,cAACyG,EAAA,EAAD,CAAQ5F,QAbF,WACVkE,GAAQzD,GACLA,GACCwD,GAAS,IAUgB9E,QAAQ,OAAjC,wBAEJ,qBAAKQ,UAAU,OAAf,SACI,cAAC,EAAD,CAAOkB,KAAMA,EAAMX,OA1Eb,SAACiG,GACXrB,QAAQC,IAAI,YACZ,MAAkBoB,EAAEC,OAAO3G,GAAG4G,OAAO,EAAE,GAAGC,MAAM,KAAhD,mBAAOjG,EAAP,KAAYC,EAAZ,KACGE,GAEC4D,EAAYmC,SAASlG,IACrBiE,EAAYiC,SAASjG,IACrBwE,QAAQC,IAAIwB,SAASlG,IACrByE,QAAQC,IAAIwB,SAASjG,KAEjBG,IAEJ+D,EAAU+B,SAASlG,IACnBsE,EAAU4B,SAASjG,KAEvB4D,GAAO,GACPD,GAAS,IA0D8BzD,MAAOA,EAAOC,IAAKA,U,eC1KnD+F,MAdf,WACE,OACE,sBAAK7G,UAAU,MAAf,UACA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO8G,OAAK,EAAC5E,KAAK,IAAI6E,OAAQ,kBAAO,cAAE,EAAF,CAAW9C,KAAM,UACtD,cAAC,IAAD,CAAO6C,OAAK,EAAC5E,KAAK,UAAU6E,OAAQ,kBAAO,cAAE,EAAF,CAAW9C,KAAM,UAC5D,cAAC,IAAD,CAAO6C,OAAK,EAAC5E,KAAK,OAAO6E,OAAQ,kBAAO,cAAE,EAAF,CAAW9C,KAAM,WACzD,cAAC,IAAD,CAAO6C,OAAK,EAAC5E,KAAK,OAAO6E,OAAQ,kBAAO,cAAE,EAAF,CAAW9C,KAAM,kBCAhD+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASV,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,gBAAD,UACE,cAAC,EAAD,QAIJrB,SAASC,eAAe,SAM1BU,M","file":"static/js/main.c0bb371b.chunk.js","sourcesContent":["import {Navbar,NavDropdown,Container,Nav} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport {LinkContainer} from 'react-router-bootstrap';\r\nimport './header.styles.css';\r\nconst reset = () =>{\r\n    window.location.reload();\r\n}\r\nconst Header = () => {\r\n    return ( \r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Container>\r\n            <Navbar.Brand><Link to=\"/\">PathFinding Visualizer</Link></Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"me-auto\">\r\n                <NavDropdown title=\"Algorithms\" id=\"collasible-nav-dropdown\">\r\n                    <LinkContainer to=\"/a-star\"><NavDropdown.Item >A*</NavDropdown.Item></LinkContainer>\r\n                    <LinkContainer to=\"/bfs\"><NavDropdown.Item >BFS</NavDropdown.Item></LinkContainer>\r\n                    <LinkContainer to=\"/dfs\"><NavDropdown.Item >DFS</NavDropdown.Item></LinkContainer>\r\n                    \r\n                    \r\n                    \r\n                    \r\n                </NavDropdown>\r\n                </Nav>\r\n                <Nav>\r\n                <Nav.Link onClick={reset}>Clear</Nav.Link>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n     );\r\n}\r\n \r\nexport default Header;","import './Node.styles.css'\r\nconst Node = ({Change,isStart,isEnd,row,col,isWall,start,end}) => {\r\n    const classes = isStart? \"node-start\" :isWall?\"iswall\": isEnd?\"node-end\":\"\";\r\n    const startEnd = (start || end)?\"set\":\"\";\r\n    //console.log(\"run\");\r\n    return ( \r\n        <div onClick={Change} className={`node ${classes} ${startEnd}`}  id={`node-${row}-${col}`}></div>\r\n     );\r\n}\r\n \r\nexport default Node;","import Node from \"../Node/Node.component\";\r\nimport './gridn.styles.css'\r\nconst Grids = ({Grid,Change,start,end}) => {\r\n    \r\n    return (\r\n    <div className=\"grid\">\r\n        {Grid.map((row,rowIndex)=>{\r\n            return(\r\n                <div key={rowIndex} className='rowWrapper'>\r\n                    {row.map((col,colIndex)=>{\r\n                        const{isStart,isEnd,isWall} = col;\r\n                        return <Node Change={Change} key={colIndex} start={start} end={end} isStart={isStart} isEnd={isEnd} row={rowIndex} col={colIndex} isWall={isWall}/>\r\n                    }\r\n                    )}\r\n                </div>\r\n            )\r\n        })}\r\n    </div>  );\r\n}\r\n \r\nexport default Grids;","function Astar(startNode,endNode){\r\n    let openSet = []\r\n    let closedSet = []\r\n    let path = [];\r\n    let visitedNodes = [];\r\n\r\n    openSet.push(startNode);\r\n    while(openSet.length > 0){\r\n        let leastIndex = 0;\r\n        for(let i=0;i<openSet.length;i++)\r\n        {\r\n            if(openSet[i].f<openSet[leastIndex].f)\r\n            {\r\n                leastIndex = i;\r\n            }\r\n        }\r\n        let current = openSet[leastIndex];\r\n        visitedNodes.push(current);\r\n       \r\n     \r\n\r\n        if(current === endNode)\r\n        {\r\n            let temp = current;\r\n            path.push(temp);\r\n            while(temp.previous){\r\n                path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n            return {path,visitedNodes};\r\n           \r\n        }\r\n\r\n        openSet = openSet.filter((el)=> el !== current);\r\n        closedSet.push(current);\r\n        \r\n        let neighbours = current.neighbours;\r\n        for(let i=0;i< neighbours.length;i++)\r\n        {\r\n           \r\n            let neighbour = neighbours[i];\r\n            if(!closedSet.includes(neighbour) && !neighbour.isWall)\r\n            {\r\n                let tempG = current.g+1;\r\n                let newPath =false;\r\n\r\n                if(openSet.includes(neighbour))\r\n                {\r\n                    if(tempG<neighbour.g)\r\n                    {\r\n                        \r\n                        \r\n                        newPath = true;\r\n                    }\r\n                }  \r\n                else{\r\n                   \r\n                    newPath = true;\r\n                    openSet.push(neighbour);\r\n                }\r\n\r\n                if(newPath)\r\n                {\r\n                    neighbour.g = tempG;\r\n                    neighbour.h = heuristic(neighbour,endNode);\r\n                    neighbour.f = neighbour.g + neighbour.h;\r\n                    neighbour.previous = current;\r\n                }\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n    return { path,visitedNodes ,error:\"No path found\"};\r\n}\r\n\r\nfunction heuristic(a,b){\r\n    let d = Math.abs(b.x - a.x) + Math.abs(b.y - a.y);\r\n    return d;\r\n}\r\n\r\nexport default Astar;","function bfs(startNode,endNode){\r\n    let path = [];\r\n    let closedSet = [];\r\n    let visitedNodes = [];\r\n    let nodes=[];\r\n    nodes.push(startNode);\r\n    while(nodes.length !== 0)\r\n    {\r\n        let u =nodes[0];\r\n        for(let i=0;i<nodes.length;i++)\r\n        {\r\n            if(nodes[i].d<u.d)\r\n            {\r\n                u = nodes[i];\r\n            }\r\n        }\r\n        visitedNodes.push(u);\r\n        closedSet.push(u);\r\n        nodes = nodes.filter((el)=> el!== u);\r\n\r\n        let neighbours = u.neighbours;\r\n        for(let i=0;i< neighbours.length;i++)\r\n        {\r\n           \r\n            let neighbour = neighbours[i];\r\n            if(!closedSet.includes(neighbour) && !neighbour.isWall)\r\n            {\r\n                \r\n                let alt = u.d + 1;\r\n                if(alt<neighbour.d)\r\n                {\r\n                    neighbour.d = alt;\r\n                    neighbour.previous = u;\r\n                    nodes.push(neighbour);\r\n                }      \r\n            }\r\n        }\r\n        if(u === endNode)\r\n        {\r\n            let temp = u;\r\n            path.push(temp);\r\n            while(temp.previous){\r\n                path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n         \r\n            return {path,visitedNodes};\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    \r\nreturn { path,visitedNodes ,error:\"No path found\"};\r\n\r\n    \r\n\r\n}\r\n\r\nexport default bfs;","function dfs(startNode,endNode){\r\n    let s = [];\r\n    let visitedNodes = [];\r\n    let path = [];\r\n    s.push(startNode);\r\n    //mark as visited\r\n    visitedNodes.push(startNode);\r\n\r\n    while(s.length !== 0)\r\n    {\r\n        let u = s.pop();\r\n        let n = u.neighbours;\r\n        if(u === endNode)\r\n        {\r\n            let temp = u;\r\n            path.push(temp);\r\n            while(temp.previous){\r\n                path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n            return {path,visitedNodes};\r\n        }\r\n\r\n        for(let i=0;i<n.length;i++)\r\n        {\r\n            if(!visitedNodes.includes(n[i]) && !n[i].isWall)\r\n            {\r\n                n[i].previous = u;\r\n                visitedNodes.push(n[i]);\r\n                s.push(n[i]);\r\n            }\r\n            \r\n\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default dfs;","import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Grids from \"../GridN/gridn.components\";\r\nimport Astar from \"../../Algortithms/astar\";\r\nimport './Pathfind.styles.css';\r\nimport { Button } from \"react-bootstrap\";\r\nimport bfs from \"../../Algortithms/bfs\";\r\nimport dfs from \"../../Algortithms/dfs\";\r\nconst rows = 15;\r\nconst cols = 25;\r\n\r\nconst PathFind = ({algo}) =>{\r\n    const [Grid,setGrid] = useState([]);\r\n    const [path,setPath] = useState([]);\r\n    const [visitedNodes,setVisitedNotes] = useState([]);\r\n    //start and end\r\n    const [start,setStart] = useState(false);\r\n    const [end,setEnd] = useState(false);\r\n    const [startRow,setStartRow] = useState(0);\r\n    const [startCol,setStartCol] = useState(0);\r\n    const [EndRow,setEndRow] = useState(rows-1);\r\n    const [EndCol,setEndCol] = useState(cols-1);\r\n    \r\n    useEffect(() => {\r\n        initializeGrid();\r\n        console.log(algo);\r\n    }, [startRow,startCol,EndCol,EndRow,algo]);\r\n\r\n    const initializeGrid = () =>{\r\n        const grid = new Array(rows);\r\n\r\n        for(let i=0;i<rows;i++)\r\n        {\r\n            grid[i] = new Array(cols);\r\n        }\r\n        createSpot(grid,1);\r\n\r\n        setGrid(grid);\r\n        addNeighbour(grid);\r\n\r\n        const startNode = grid[startRow][startCol];\r\n        const endNode = grid[EndRow][EndCol];\r\n        startNode.isWall = false;\r\n        endNode.isWall = false;\r\n        setGrid(grid);\r\n        let path = Astar(startNode,endNode);\r\n        if(algo === 'BFS')\r\n        {\r\n           \r\n            path = bfs(startNode,endNode);\r\n        }\r\n        else if(algo === \"DFS\")\r\n        {\r\n            \r\n            path = dfs(startNode,endNode);\r\n        }\r\n        setPath(path.path);\r\n        setVisitedNotes(path.visitedNodes);\r\n    };\r\n    //creates spot\r\n    const createSpot =(grid,show)=>{\r\n        for(let i=0;i<rows;i++)\r\n        {\r\n            for(let j=0;j<cols;j++)\r\n            {\r\n                grid[i][j] = new Spot(i,j,show);\r\n            }\r\n        }\r\n    };\r\n\r\n    //add neighbour\r\n    const addNeighbour =(grid)=>{\r\n        for(let i= 0;i<rows;i++)\r\n        {\r\n            for(let j=0;j<cols;j++)\r\n            {\r\n                grid[i][j].addneighbours(grid);\r\n            }\r\n        }\r\n    }\r\n    //Spot Constructor\r\n    function Spot(i,j,show)\r\n    {\r\n        this.x = i;\r\n        this.y = j;\r\n        this.isStart = this.x === startRow && this.y === startCol;\r\n        this.isEnd = this.x === EndRow && this.y === EndCol;\r\n        this.g = 0;\r\n        this.f = 0;\r\n        this.isWall = false;\r\n        if(Math.random(1)<0.2 && show){\r\n            this.isWall = true;\r\n        }\r\n        this.h = 0;\r\n        this.d = Infinity;\r\n        if(this.x === startRow && this.y === startCol){\r\n            this.d = 1;\r\n        }\r\n        this.neighbours=[];\r\n        this.previous = undefined;\r\n        this.addneighbours = function(grid)\r\n        {\r\n            let i = this.x;\r\n            let j = this.y;\r\n            if(i>0)this.neighbours.push(grid[i-1][j]);\r\n            if(i<rows-1) this.neighbours.push(grid[i+1][j]);\r\n            if(j>0) this.neighbours.push(grid[i][j-1]);\r\n            if(j<cols-1) this.neighbours.push(grid[i][j+1]);\r\n        };\r\n\r\n    }\r\n    // console.log(Grid);\r\n\r\n    //grid with node\r\n    const Change =(e)=>{\r\n        console.log(\"this ran\");\r\n        const [row ,col]= e.target.id.substr(5,9).split(\"-\");\r\n        if(start)\r\n        {\r\n            setStartRow(parseInt(row));\r\n            setStartCol(parseInt(col));\r\n            console.log(parseInt(row));\r\n            console.log(parseInt(col));\r\n        }\r\n        else if(end)\r\n        {\r\n            setEndRow(parseInt(row));\r\n            setEndCol(parseInt(col));\r\n        }\r\n        setEnd(false);\r\n        setStart(false);\r\n        \r\n        \r\n    }\r\n    \r\n    const visualizeShortestPath = (shortestPathNodes) =>{\r\n\r\n        for(let i =0;i<shortestPathNodes.length;i++)\r\n        {\r\n            setTimeout(() => {\r\n                const node = shortestPathNodes[i];\r\n                document.getElementById(`node-${node.x}-${node.y}`).className=\"node node-shortest-path\";\r\n            }, 10*i);\r\n        }\r\n\r\n    }\r\n    const visualizePath = ()=>{\r\n        for(let i =0;i<=visitedNodes.length;i++)\r\n        {\r\n            if(i === visitedNodes.length)\r\n            {\r\n                setTimeout(() => {\r\n                    visualizeShortestPath(path);\r\n                }, 20*i);\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    const node = visitedNodes[i];\r\n                    document.getElementById(`node-${node.x}-${node.y}`).className=\"node node-visited\";\r\n                  \r\n                }, 20*i);\r\n              \r\n            \r\n            }\r\n        };\r\n    }\r\n    const startSet =()=>{\r\n        setStart(!start);\r\n        if(start){\r\n            setEnd(false);\r\n        }\r\n    }\r\n    const endSet =()=>{\r\n        setEnd(!end);\r\n        if(end){\r\n            setStart(false);\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className=\"Wrapper\"> \r\n        <h1>{algo} Alogrithm</h1>\r\n        <div className=\"buttons\">\r\n            <Button variant=\"dark\" onClick={visualizePath}>Visualize Path</Button>\r\n            <Button onClick={startSet} variant=\"dark\">Set Start</Button>\r\n            <Button onClick={endSet} variant=\"dark\">Set End</Button>\r\n        </div>\r\n        <div className='main'>\r\n            <Grids Grid={Grid} Change={Change} start={start} end={end}/>\r\n        </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PathFind;","import Header from './components/Header/header.component';\nimport PathFind from './components/Pathfind/Pathfind.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Switch,Route} from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header/>\n    <Switch>\n      <Route exact path='/' render={() => (< PathFind algo={\"A*\"}/> )}/>\n      <Route exact path='/a-star' render={() => (< PathFind algo={\"A*\"}/> )}/>\n      <Route exact path='/bfs' render={() => (< PathFind algo={\"BFS\"}/> )}/>\n      <Route exact path='/dfs' render={() => (< PathFind algo={\"DFS\"}/> )}/>\n    </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}